{"version":3,"sources":["../src/feed.js"],"names":["GENERATOR","DOCTYPE","Feed","options","items","categories","contributors","extensions","item","push","category","contributor","extension","format","console","warn","atom1","rss2","feed","_attr","xmlns","id","title","updated","ISODateString","Date","generator","root","author","name","email","link","uri","rel","href","atomLink","feedLinks","atom","hub","description","subtitle","image","logo","favicon","icon","copyright","rights","forEach","term","entry","type","_cdata","date","summary","content","Array","isArray","oneAuthor","published","isAtom","isContent","channel","lastBuildDate","toUTCString","docs","rss","version","url","language","guid","pubDate","some","enclosure","home_page_url","json","feed_url","e","objects","map","feedItem","html_content","date_modified","date_published","JSON","stringify","d","pad","n","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","module","exports"],"mappings":"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","file":"feed.js","sourcesContent":["import xml from 'xml';\n\nconst GENERATOR = 'Feed for Node.js';\nconst DOCTYPE = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n';\n\nclass Feed {\n    constructor(options) {\n        this.options = options;\n        this.items = [];\n        this.categories = [];\n        this.contributors = [];\n        this.extensions = [];\n    }\n\n    addItem(item) {\n        this.items.push(item);\n    }\n\n    addCategory(category) {\n        this.categories.push(category);\n    }\n\n    addContributor(contributor) {\n        this.contributors.push(contributor);\n    }\n\n    addExtension(extension) {\n        this.extensions.push(extension);\n    }\n\n    render(format) {\n        console.warn('DEPRECATED: use atom1() or rss2() instead of render()');\n        if (format === 'atom-1.0') {\n            return this.atom1();\n        } else {\n            return this.rss2();\n        }\n    }\n\n    atom1() {\n        const { options } = this;\n\n        let feed = [\n            { _attr: { xmlns: 'http://www.w3.org/2005/Atom' } },\n            { id: options.id },\n            { title: options.title },\n            { updated: options.updated ? this.ISODateString(options.updated) : this.ISODateString(new Date()) },\n            { generator: options.generator || GENERATOR }\n        ];\n\n        let root = [{ feed }];\n\n        if (options.author) {\n            const { name, email, link } = options.author;\n            let author = [];\n\n            if (name) {\n                author.push({ name });\n            }\n\n            if (email) {\n                author.push({ email });\n            }\n\n            if (link) {\n                author.push({ uri: link });\n            }\n\n            feed.push({ author });\n        }\n\n        // link (rel=\"alternate\")\n        if (options.link) {\n            feed.push({ link: { _attr: { rel: 'alternate', href: options.link } } });\n        }\n\n        // link (rel=\"self\")\n        const atomLink = options.feed || (options.feedLinks && options.feedLinks.atom);\n        if (atomLink) {\n            feed.push({ link: { _attr: { rel: 'self', href: atomLink } } });\n        }\n\n        // link (rel=\"hub\")\n        if (options.hub) {\n            feed.push({ link: { _attr: { rel: 'hub', href: options.hub } } });\n        }\n\n        /**************************************************************************\n         * \"feed\" node: optional elements\n         *************************************************************************/\n\n        if (options.description) {\n            feed.push({ subtitle: options.description });\n        }\n\n        if (options.image) {\n            feed.push({ logo: options.image });\n        }\n\n        if (options.favicon) {\n            feed.push({ icon: options.favicon });\n        }\n\n        if (options.copyright) {\n            feed.push({ rights: options.copyright });\n        }\n\n        this.categories.forEach(category => {\n            feed.push({ category: [{ _attr: { term: category } }] });\n        });\n\n        this.contributors.forEach(item => {\n            const { name, email, link } = item;\n            let contributor = [];\n\n            if (name) {\n                contributor.push({ name });\n            }\n\n            if (email) {\n                contributor.push({ email });\n            }\n\n            if (link) {\n                contributor.push({ uri: link });\n            }\n\n            feed.push({ contributor });\n        });\n\n        // icon\n\n        /**************************************************************************\n         * \"entry\" nodes\n         *************************************************************************/\n        this.items.forEach(item => {\n            //\n            // entry: required elements\n            //\n\n            let entry = [\n                { title: { _attr: { type: 'html' }, _cdata: item.title } },\n                { id: item.id || item.link },\n                { link: [{ _attr: { href: item.link } }] },\n                { updated: this.ISODateString(item.date) }\n            ];\n\n            //\n            // entry: recommended elements\n            //\n            if (item.description) {\n                entry.push({ summary: { _attr: { type: 'html' }, _cdata: item.description } });\n            }\n\n            if (item.content) {\n                entry.push({ content: { _attr: { type: 'html' }, _cdata: item.content } });\n            }\n\n            // entry author(s)\n            if (Array.isArray(item.author)) {\n                item.author.forEach(oneAuthor => {\n                    const { name, email, link } = oneAuthor;\n                    let author = [];\n\n                    if (name) {\n                        author.push({ name });\n                    }\n\n                    if (email) {\n                        author.push({ email });\n                    }\n\n                    if (link) {\n                        author.push({ uri: link });\n                    }\n\n                    entry.push({ author });\n                });\n            }\n\n            // content\n\n            // link - relative link to article\n\n            //\n            // entry: optional elements\n            //\n\n            // category\n\n            // contributor\n            if (Array.isArray(item.contributor)) {\n                item.contributor.forEach(item => {\n                    const { name, email, link } = item;\n                    let contributor = [];\n\n                    if (name) {\n                        contributor.push({ name });\n                    }\n\n                    if (email) {\n                        contributor.push({ email });\n                    }\n\n                    if (link) {\n                        contributor.push({ uri: link });\n                    }\n\n                    entry.push({ contributor });\n                });\n            }\n\n            // published\n            if (item.published) {\n                entry.push({ published: this.ISODateString(item.published) });\n            }\n\n            // source\n\n            // rights\n            if (item.copyright) {\n                entry.push({ rights: item.copyright });\n            }\n\n            feed.push({ entry: entry });\n        });\n\n        return DOCTYPE + xml(root, true);\n    }\n\n    rss2() {\n        const { options } = this;\n        let isAtom = false;\n        let isContent = false;\n\n        let channel = [\n            { title: options.title },\n            { link: options.link },\n            { description: options.description },\n            { lastBuildDate: options.updated ? options.updated.toUTCString() : new Date().toUTCString() },\n            { docs: 'http://blogs.law.harvard.edu/tech/rss' },\n            { generator: options.generator || GENERATOR }\n        ];\n\n        let rss = [{ _attr: { version: '2.0' } }, { channel }];\n\n        let root = [{ rss }];\n\n        /**\n         * Channel Image\n         * http://cyber.law.harvard.edu/rss/rss.html#ltimagegtSubelementOfLtchannelgt\n         */\n        if (options.image) {\n            channel.push({\n                image: [{ title: options.title }, { url: options.image }, { link: options.link }]\n            });\n        }\n\n        if (options.language) {\n            channel.push({ language: options.language });\n        }\n\n        /**\n         * Channel Copyright\n         * http://cyber.law.harvard.edu/rss/rss.html#optionalChannelElements\n         */\n        if (options.copyright) {\n            channel.push({ copyright: options.copyright });\n        }\n\n        /**\n         * Channel Categories\n         * http://cyber.law.harvard.edu/rss/rss.html#comments\n         */\n        this.categories.forEach(category => {\n            channel.push({ category });\n        });\n\n        /**\n         * Feed URL\n         * http://validator.w3.org/feed/docs/warning/MissingAtomSelfLink.html\n         */\n        const atomLink = options.feed || (options.feedLinks && options.feedLinks.atom);\n        if (atomLink) {\n            isAtom = true;\n\n            channel.push({\n                'atom:link': {\n                    _attr: {\n                        href: atomLink,\n                        rel: 'self',\n                        type: 'application/rss+xml'\n                    }\n                }\n            });\n        }\n\n        /**\n         * Hub for PubSubHubbub\n         * https://code.google.com/p/pubsubhubbub/\n         */\n        if (options.hub) {\n            isAtom = true;\n            channel.push({\n                'atom:link': {\n                    _attr: {\n                        href: options.hub,\n                        rel: 'hub'\n                    }\n                }\n            });\n        }\n\n        /**\n         * Channel Categories\n         * http://cyber.law.harvard.edu/rss/rss.html#hrelementsOfLtitemgt\n         */\n        this.items.forEach(entry => {\n            let item = [];\n\n            if (entry.title) {\n                item.push({ title: { _cdata: entry.title } });\n            }\n\n            if (entry.link) {\n                item.push({ link: entry.link });\n            }\n\n            if (entry.guid) {\n                item.push({ guid: entry.guid });\n            } else if (entry.link) {\n                item.push({ guid: entry.link });\n            }\n\n            if (entry.date) {\n                item.push({ pubDate: entry.date.toUTCString() });\n            }\n\n            if (entry.description) {\n                item.push({ description: { _cdata: entry.description } });\n            }\n\n            if (entry.content) {\n                isContent = true;\n                item.push({ 'content:encoded': { _cdata: entry.content } });\n            }\n            /**\n             * Item Author\n             * http://cyber.law.harvard.edu/rss/rss.html#ltauthorgtSubelementOfLtitemgt\n             */\n            if (Array.isArray(entry.author)) {\n                entry.author.some(author => {\n                    if (author.email && author.name) {\n                        item.push({ author: author.email + ' (' + author.name + ')' });\n                        return true;\n                    } else if (author.name) {\n                        item.push({ author: author.name });\n                        return true;\n                    } else {\n                        return false;\n                    }\n                });\n            }\n\n            if (entry.image) {\n                item.push({ enclosure: [{ _attr: { url: entry.image } }] });\n            }\n\n            if (entry.categories) {\n                entry.categories.forEach(function(category) {\n                    item.push({ category: category });\n                });\n            }\n\n            channel.push({ item });\n        });\n\n        if (isContent) {\n            rss[0]._attr['xmlns:content'] = 'http://purl.org/rss/1.0/modules/content/';\n        }\n\n        if (isAtom) {\n            rss[0]._attr['xmlns:atom'] = 'http://www.w3.org/2005/Atom';\n        }\n\n        return DOCTYPE + xml(root, true);\n    }\n\n    json1() {\n        const { options, items, extensions } = this;\n        let feed = {\n            version: 'https://jsonfeed.org/version/1',\n            title: options.title\n        };\n\n        if (options.link) {\n            feed.home_page_url = options.link;\n        }\n\n        if (options.feedLinks && options.feedLinks.json) {\n            feed.feed_url = options.feedLinks.json;\n        }\n\n        if (options.description) {\n            feed.description = options.description;\n        }\n\n        if (options.image) {\n            feed.icon = options.image;\n        }\n\n        if (options.author) {\n            feed.author = {};\n            if (options.author.name) {\n                feed.author.name = options.author.name;\n            }\n            if (options.author.link) {\n                feed.author.url = options.author.link;\n            }\n        }\n\n        extensions.forEach(e => {\n            feed[e.name] = e.objects;\n        });\n\n        feed.items = items.map(item => {\n            let feedItem = {\n                id: item.id,\n                // json_feed distinguishes between html and text content\n                // but since we only take a single type, we'll assume HTML\n                html_content: item.content\n            };\n            if (item.link) {\n                feedItem.url = item.link;\n            }\n            if (item.title) {\n                feedItem.title = item.title;\n            }\n            if (item.description) {\n                feedItem.summary = item.description;\n            }\n\n            if (item.image) {\n                feedItem.image = item.image;\n            }\n\n            if (item.date) {\n                feedItem.date_modified = this.ISODateString(item.date);\n            }\n            if (item.published) {\n                feedItem.date_published = this.ISODateString(item.published);\n            }\n\n            if (item.author) {\n                let author = item.author;\n                if (author instanceof Array) {\n                    // json feed only supports 1 author per post\n                    author = author[0];\n                }\n                feedItem.author = {};\n                if (author.name) {\n                    feedItem.author.name = author.name;\n                }\n                if (author.link) {\n                    feedItem.author.url = author.link;\n                }\n            }\n\n            if (item.extensions) {\n                item.extensions.forEach(e => {\n                    feedItem[e.name] = e.objects;\n                });\n            }\n\n            return feedItem;\n        });\n\n        return JSON.stringify(feed, null, 4);\n    }\n\n    ISODateString(d) {\n        function pad(n) {\n            return n < 10 ? '0' + n : n;\n        }\n\n        return (\n            d.getUTCFullYear() +\n            '-' +\n            pad(d.getUTCMonth() + 1) +\n            '-' +\n            pad(d.getUTCDate()) +\n            'T' +\n            pad(d.getUTCHours()) +\n            ':' +\n            pad(d.getUTCMinutes()) +\n            ':' +\n            pad(d.getUTCSeconds()) +\n            'Z'\n        );\n    }\n}\n\nmodule.exports = Feed;\n"]}